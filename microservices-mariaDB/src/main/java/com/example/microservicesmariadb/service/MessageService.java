package com.example.microservicesmariadb.service;

import com.example.microservicesmariadb.dto.MessageDto;
import com.example.microservicesmariadb.dto.MessageSocket;
import com.example.microservicesmariadb.mapper.MessageMapper;
import com.example.microservicesmariadb.repository.MessageRepository;
import com.example.microservicesmariadb.websocket.MyStompSessionHandler;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.messaging.converter.MappingJackson2MessageConverter;
import org.springframework.messaging.simp.stomp.StompSessionHandler;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.socket.client.WebSocketClient;
import org.springframework.web.socket.client.standard.StandardWebSocketClient;
import org.springframework.web.socket.messaging.WebSocketStompClient;

/**
 * MessageService
 *
 * @author alex90bar
 */

@Slf4j
@Service
@Transactional
@RequiredArgsConstructor
public class MessageService {

  private final MessageRepository repository;
  private final MessageMapper mapper;
  private Integer sessionId;
  private StompSessionHandler sessionHandler;
  private WebSocketStompClient stompClient;
  private Long startTime;
  @Value(value = "${messaging.time-sec}")
  private Integer timeSec;
  @Value(value = "${messaging.websocket-url}")
  private String URL;
  private Boolean stop;

  {
    sessionId = 0;
  }

  public void postMessage(MessageDto message) {
    message.setEndTimestamp(ZonedDateTime.now());
    repository.save(mapper.toEntity(message));

    if (((System.currentTimeMillis() - startTime) > timeSec * 1000L ) || stop) stop();
    else nextMessage();
  }

  public void nextMessage(){
    stompClient.connect(URL, sessionHandler);
  }

  public void startMessaging() {
    stop = false;
    startTime = System.currentTimeMillis();

    WebSocketClient client = new StandardWebSocketClient();
    stompClient = new WebSocketStompClient(client);

    stompClient.setMessageConverter(new MappingJackson2MessageConverter());

    sessionHandler = new MyStompSessionHandler(sessionId);
    stompClient.connect(URL, sessionHandler);
    log.info("Session #" + sessionId + " begins at: " + ZonedDateTime.now());
  }

  public void pushStop(){
    stop = true;
  }

  public void stop(){
    stompClient.stop();
    log.info("Session #" + sessionId + " stopped. Session time: " +
        (System.currentTimeMillis() - startTime) + " ms");
    log.info("Messages generated by session #" + sessionId + " : " +
        repository.findAllBySessionId(sessionId).size() + " messages");
    sessionId++;
  }

  public List<MessageDto> getAll() {
    return repository.findAll().stream().map(mapper::toDto).collect(Collectors.toList());
  }
}


